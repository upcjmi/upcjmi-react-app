{"version":3,"sources":["../node_modules/antd/es/empty/style/index.js","helpers/api/company.api.helper.ts","components/student/jobListing.student.tsx","components/student/companyDrives.student.tsx","screens/student/recruitment.student.screen.tsx"],"names":["getAllCompaniesAPI","loadSecureUrl","getJobBasicDetailsAPI","company","getJobDetailsAPI","job","applyToJobAPI","data","method","getAllJobsAppliedAPI","JobListing","companyId","title","pay","package","courses","courses_allowed","close","id","Item","label","Date","toLocaleString","to","type","Title","CompanyDrives","useState","jobs","setJobs","loading","setLoading","useEffect","a","openNotificationWithIcon","name","load","cards","map","xs","key","toString","level","RecruitmentStudentScreen","props","companies","setCompanies","index","className","length","description"],"mappings":"uGAAA,c,iCCCA,sLAKaA,EAAqB,kBAA4BC,YAHxC,aAITC,EACX,SAACC,GAAD,OAAmCF,YAAc,WAAD,OAAYE,EAAZ,WAErCC,EACX,SAACD,EAAiBE,GAAlB,OACEJ,YAAc,WAAD,OAAYE,EAAZ,gBAA2BE,EAA3B,OAEJC,EACX,SAACH,EAAiBE,EAAaE,GAA/B,OACEN,YAAc,WAAD,OAAYE,EAAZ,gBAA2BE,EAA3B,WAAyC,CACpDG,OAAQ,OACRD,UAGOE,EAAuB,kBAClCR,YAlBsB,2B,qRC4BTS,EAtBgB,SAAC,GAA8B,IAA7BL,EAA4B,EAA5BA,IAAKM,EAAuB,EAAvBA,UAC7BC,EAA4DP,EAA5DO,MAAgBC,EAA4CR,EAArDS,QAA+BC,EAAsBV,EAAvCW,gBAA0BC,EAAaZ,EAAbY,MAAOC,EAAMb,EAANa,GAE7D,OACE,2BACE,uBAAcN,MAAOA,GACnB,sBAAcO,KAAd,CAAmBC,MAAM,WAAWP,GACpC,sBAAcM,KAAd,CAAmBC,MAAM,mBAAmBL,GAC5C,sBAAcI,KAAd,CAAmBC,MAAM,YACrB,IAAIC,KAAKJ,GAAQK,mBAGvB,kBAAC,IAAD,CAAMC,GAAE,mBAAcZ,EAAd,gBAA+BO,EAA/B,MACN,uBAAQM,KAAK,WAAb,wBCVDC,E,IAAAA,MAyDQC,EAvDmB,SAAC,GAAuB,IAAtBvB,EAAqB,EAArBA,QAAqB,EAE/BwB,mBAAS,CAAC,CAACT,GAAI,MAFgB,mBAEhDU,EAFgD,KAE1CC,EAF0C,OAGzBF,oBAAS,GAHgB,mBAGhDG,EAHgD,KAGvCC,EAHuC,KAuBvD,GAlBAC,qBAAU,YACE,uCAAG,4BAAAC,EAAA,+EAEU/B,YAAsBC,EAAQe,IAFxC,OAEHX,EAFG,OAGTsB,EAAQtB,GACRwB,GAAW,GAJF,gDAMTG,YACE,QADsB,qDAEwB/B,EAAQgC,KAFhC,YAGtB,2BATO,yDAAH,qDAcVC,KACC,CAACjC,IAEDyB,IAAS,KAAOE,EACjB,OAAO,KAET,IAAMO,EAAQT,EAAKU,KAAI,SAACjC,GAAD,OACrB,uBAAKkC,GAAI,GAAIC,IAAKnC,EAAIa,GAAGuB,YACvB,kBAAC,EAAD,CAAYpC,IAAKA,EAAKM,UAAWR,EAAQe,SAI7C,OACE,6BACE,6BAEA,kBAACO,EAAD,CAAOiB,MAAO,GACXvC,EAAQgC,MAGX,2BACGL,EACC,2BACE,6BAEAO,GAGN,6BACA,+BCvDCZ,E,IAAAA,MA2CQkB,UAxC8B,SAACC,GAAmB,IAAD,EAC5BjB,mBAAS,IADmB,mBACvDkB,EADuD,KAC5CC,EAD4C,OAEhCnB,oBAAS,GAFuB,mBAEvDG,EAFuD,KAE9CC,EAF8C,KAI9DC,qBAAU,YACE,uCAAG,4BAAAC,EAAA,sEACQjC,cADR,OACLO,EADK,OAGXuC,EAAavC,GACbwB,GAAW,GAJA,2CAAH,qDAOVK,KACC,IAEH,IAAMR,EAAOiB,EAAUP,KAAI,SAACnC,EAAS4C,GAAV,OACzB,kBAAC,EAAD,CAAeP,IAAKO,EAAMN,WAAYtC,QAASA,OAGjD,OACE,yBAAK6C,UAAU,aACb,kBAAC,EAAD,2BAGiB,IAAhBpB,EAAKqB,QAAiBnB,EAInB,KAHF,2BACE,uBAAOoB,YAAY,mCAItBpB,EACC,2BACE,6BAEAF","file":"static/js/23.15100f5f.chunk.js","sourcesContent":["import '../../style/index.less';\nimport './index.less';","import {IAllCompany} from 'types/company.api.type';\nimport {loadSecureUrl} from './loader.api.helper';\n\nconst UAllCompanies = 'company/';\nconst UAllAppliedJobs = 'company/applied/jobs/';\n\nexport const getAllCompaniesAPI = (): Promise<IAllCompany> => loadSecureUrl(UAllCompanies);\nexport const getJobBasicDetailsAPI =\n  (company: number): Promise<any> => loadSecureUrl(`company/${company}/job/`);\n\nexport const getJobDetailsAPI =\n  (company: number, job: number): Promise<any> =>\n    loadSecureUrl(`company/${company}/job/${job}/`);\n\nexport const applyToJobAPI =\n  (company: number, job: number, data: any): Promise<any> =>\n    loadSecureUrl(`company/${company}/job/${job}/apply/`, {\n      method: 'post',\n      data\n    });\n\nexport const getAllJobsAppliedAPI = (): Promise<any> =>\n  loadSecureUrl(UAllAppliedJobs);\n","import React, {FC} from 'react';\nimport {Button, Card, Descriptions} from 'antd';\nimport {Link} from 'react-router-dom';\n\ninterface IProps {\n  job: any;\n  companyId: number;\n}\n\n\nconst JobListing: FC<IProps> = ({job, companyId}: IProps) => {\n  const {title, package: pay, courses_allowed: courses, close, id} = job;\n\n  return (\n    <Card>\n      <Descriptions title={title}>\n        <Descriptions.Item label='Package'>{pay}</Descriptions.Item>\n        <Descriptions.Item label='Courses Allowed'>{courses}</Descriptions.Item>\n        <Descriptions.Item label='Apply by'>\n          {(new Date(close)).toLocaleString()}\n        </Descriptions.Item>\n      </Descriptions>\n      <Link to={`/company/${companyId}/job/${id}/`}>\n        <Button type='primary'>\n          View full details\n        </Button>\n      </Link>\n    </Card>\n  );\n};\n\n\nexport default JobListing;\n","import React, {FC, useEffect, useState} from 'react';\nimport {Card, Col, Row, Typography, Skeleton} from 'antd';\n\nimport {ICompany} from 'types/company.api.type';\nimport {getJobBasicDetailsAPI} from 'helpers/api/company.api.helper';\nimport {openNotificationWithIcon} from 'helpers/notification.helper';\nimport JobListing from './jobListing.student';\n\n\ninterface IProps {\n  company: ICompany;\n}\n\nconst {Title} = Typography;\n\nconst CompanyDrives: FC<IProps> = ({company}: IProps) => {\n\n  const [jobs, setJobs] = useState([{id: ''}]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const load = async () => {\n      try{\n        const data = await getJobBasicDetailsAPI(company.id);\n        setJobs(data);\n        setLoading(false);\n      } catch (e) {\n        openNotificationWithIcon(\n          'error',\n          `Some unknown error occurred while fetching ${company.name} details`,\n          'Try refreshing the page'\n        )\n      }\n    };\n\n    load();\n  }, [company]);\n\n  if(jobs === [] && !loading)\n    return null;\n\n  const cards = jobs.map((job) => (\n    <Col xs={24} key={job.id.toString()}>\n      <JobListing job={job} companyId={company.id} />\n    </Col>\n  ));\n\n  return (\n    <div>\n      <br />\n\n      <Title level={3}>\n        {company.name}\n      </Title>\n\n      <Row>\n        {loading? (\n          <Card>\n            <Skeleton />\n          </Card>\n        ) : cards}\n      </Row>\n\n      <br />\n      <br />\n    </div>\n  );\n};\n\n\nexport default CompanyDrives;\n","import React, {FC, useState, useEffect} from 'react';\nimport {Typography, Skeleton, Card, Empty} from 'antd';\nimport CompanyDrives from 'components/student/companyDrives.student';\nimport {getAllCompaniesAPI} from 'helpers/api/company.api.helper';\n\ninterface IProps {\n}\n\n\nconst {Title} = Typography;\n\n// eslint-disable-next-line no-unused-vars\nconst RecruitmentStudentScreen: FC<IProps> = (props: IProps) => {\n  const [companies, setCompanies] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const load = async () => {\n      const data = await getAllCompaniesAPI();\n      // @ts-ignore\n      setCompanies(data);\n      setLoading(false);\n    };\n\n    load();\n  }, []);\n\n  const jobs = companies.map((company, index) => (\n    <CompanyDrives key={index.toString()} company={company} />\n  ));\n\n  return (\n    <div className='container'>\n      <Title>\n        Recruitment Drives\n      </Title>\n      {jobs.length === 0 && !loading ? (\n        <Card>\n          <Empty description='No jobs are available for now' />\n        </Card>\n      ) : null}\n\n      {loading? (\n        <Card>\n          <Skeleton />\n        </Card>\n      ) : jobs}\n    </div>\n  );\n};\n\n\nexport default RecruitmentStudentScreen;\n"],"sourceRoot":""}