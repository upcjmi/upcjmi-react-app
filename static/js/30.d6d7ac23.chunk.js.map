{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","screens/emailVerification.screen.tsx"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","prototype","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","TypeError","withRouter","match","useState","verifing","setVerifing","email","setEmail","useEffect","a","verifyEmailAPI","params","hash","data","openNotificationWithIcon","verify","className","size","tip","icon","type","theme","status","title","extra"],"mappings":"mGAGe,SAASA,EAAeC,EAAKC,GAC1C,OCJa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDGxB,CAAeA,IEJT,SAA+BA,EAAKC,GACjD,GAAMG,OAAOC,YAAYC,OAAON,IAAgD,uBAAxCM,OAAOC,UAAUC,SAASC,KAAKT,GAAvE,CAIA,IAAIU,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKhB,EAAII,OAAOC,cAAmBM,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAETnB,GAAKS,EAAKW,SAAWpB,GAH8CU,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFvBuB,CAAqBV,EAAKC,IGJ3C,WACb,MAAM,IAAIsB,UAAU,wDHG0C,GAJhE,mC,wKIiEeC,uBAvD6B,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAgB,EAE5BC,oBAAS,GAFmB,mBAErDC,EAFqD,KAE3CC,EAF2C,OAGlCF,mBAAS,IAHyB,mBAGrDG,EAHqD,KAG9CC,EAH8C,KAK5DC,qBAAU,YACI,uCAAG,4BAAAC,EAAA,+EAEQC,YAAeR,EAAMS,OAAOC,MAFpC,OAELC,EAFK,OAGXN,EAASM,EAAKP,OACdD,GAAY,GAJD,gDAMXS,YAAyB,QAAS,yBANvB,yDAAH,qDAUZC,MA8BF,OACE,yBAAKC,UAAU,iCACb,6BA5BCZ,EAEC,oCACE,uBAAMa,KAAK,QAAQC,IAAI,yBACvB,8BAIO,KAAVZ,EAEC,uBACEa,KAAM,uBAAMC,KAAK,QAAQC,MAAM,YAC/BC,OAAO,UACPC,MAAK,oBAAejB,EAAf,sBACLkB,MAAM,4BAKV,uBACEF,OAAO,UACPC,MAAM","file":"static/js/30.d6d7ac23.chunk.js","sourcesContent":["import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import React, {FC, useState, useEffect} from 'react';\nimport {Spin, Result, Icon} from 'antd';\nimport {withRouter} from 'react-router-dom';\nimport {verifyEmailAPI} from 'helpers/api/api.helper';\nimport {openNotificationWithIcon} from 'helpers/notification.helper';\n\ninterface IProps {\n  match: any\n}\n\nconst EmailVerificationScreen: FC<IProps> = ({match}: any) => {\n\n  const [verifing, setVerifing] = useState(true);\n  const [email, setEmail] = useState('');\n\n  useEffect(() => {\n    const verify = async () => {\n      try {\n        const data = await verifyEmailAPI(match.params.hash);\n        setEmail(data.email);\n        setVerifing(false);\n      } catch (e) {\n        openNotificationWithIcon('error', 'Error in verification');\n      }\n    };\n\n    verify();\n  });\n\n  const display = () => {\n    if(verifing)\n      return (\n        <>\n          <Spin size='large' tip='Verifying your email' />\n          <br />\n        </>\n      );\n\n    if(email !== '')\n      return (\n        <Result\n          icon={<Icon type='smile' theme='twoTone' />}\n          status='success'\n          title={`You email ${email} has been verified`}\n          extra='Continue by signing in.'\n        />\n      );\n\n    return (\n      <Result\n        status='warning'\n        title='Trouble verifying your email'\n      />\n    )\n  };\n\n  return (\n    <div className='container center-hv full-page'>\n      <div>\n        {display()}\n      </div>\n    </div>\n  );\n};\n\nexport default withRouter(EmailVerificationScreen);\n"],"sourceRoot":""}