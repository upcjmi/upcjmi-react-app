{"version":3,"sources":["../node_modules/antd/es/empty/style/index.js","helpers/api/core.api.helper.ts","screens/student/courses.student.screen.tsx"],"names":["getAllAvailableCourseAPI","loadSecureUrl","courseDetailsAPI","id","applyToCourseAPI","data","course","method","getAllAppliedCoursesAPI","getAllNotices","loadOpenUrl","getCoordinator","department","getNotice","getBadges","Title","CoursesStudentScreen","useState","title","details","open","close","duration","start_date","end_date","courses","setCourses","loading","setLoading","useEffect","a","openNotificationWithIcon","load","className","length","description","map","Item","label","Date","toLocaleString","to","type"],"mappings":"mGAAA,c,iCCAA,4RAQaA,EAA2B,kBAAMC,YAN1B,aAQPC,EAAmB,SAACC,GAAD,OAAgBF,YAAc,GAAD,OARzC,YAQyC,OAAkBE,EAAlB,OAEhDC,EAAmB,SAACC,EAAWC,GAAZ,OAC9BL,YAAc,WAAD,OAAYK,EAAZ,WAA6B,CACxCC,OAAQ,OACRF,UAGSG,EAA0B,kBAAMP,YAflB,qBAiBdQ,EAAgB,kBAAMC,YAhBf,aAiBPC,EAAiB,SAACC,GAAD,OAAwBF,YAAY,GAAD,OAhB5C,gBAgB4C,OAAmBE,EAAnB,OACpDC,EAAY,SAACV,GAAD,OAAgBO,YAAY,GAAD,OAlBhC,YAkBgC,OAAkBP,EAAlB,OACvCW,EAAY,kBAAMJ,YAAY,GAAD,OAjBzB,e,mPCEVK,E,IAAAA,MA+DQC,UA9D0B,WAAO,IAAD,EACfC,mBAAS,CACrC,CACEd,GAAI,EACJe,MAAO,GACPC,QAAS,GACTC,KAAM,GACNC,MAAO,GACPC,SAAU,GACVC,WAAY,GACZC,SAAU,MAV+B,mBACtCC,EADsC,KAC7BC,EAD6B,OAafT,oBAAS,GAbM,mBAatCU,EAbsC,KAa7BC,EAb6B,KA8B7C,OAfAC,qBAAU,YACE,uCAAG,4BAAAC,EAAA,+EAEU9B,cAFV,OAEHK,EAFG,OAGTqB,EAAWrB,GACXuB,GAAW,GAJF,gDAOTG,YAAyB,QAAS,8BAA+B,2BAPxD,yDAAH,qDAWVC,KACC,IAECL,EAEA,yBAAKM,UAAU,aACb,6BAKJ,yBAAKA,UAAU,aACb,kBAAClB,EAAD,wBACoB,IAAnBU,EAAQS,QAAiBP,EAItB,KAHF,2BACE,uBAAOQ,YAAY,sCAGtBV,EAAQW,KAAI,SAAA9B,GAAM,OACjB,2BACE,uBAAcY,MAAOZ,EAAOY,OAC1B,sBAAcmB,KAAd,CAAmBC,MAAM,YAAYhC,EAAOgB,UAC5C,sBAAce,KAAd,CAAmBC,MAAM,YACtB,IAAIC,KAAKjC,EAAOe,OAAOmB,mBAG5B,kBAAC,IAAD,CAAMC,GAAE,mBAAcnC,EAAOH,GAArB,MACN,uBAAQuC,KAAK,WAAb","file":"static/js/31.02301f6c.chunk.js","sourcesContent":["import '../../style/index.less';\nimport './index.less';","import {loadOpenUrl, loadSecureUrl} from './main.api.helper';\n\nconst UAllCourses = 'courses/';\nconst UAllAppliedCourses = 'courses/applied/';\nconst UALLNOTICES = 'notices/';\nconst UCOORDINATOR = 'coordinator/';\nconst URanking = 'ranking/';\n\nexport const getAllAvailableCourseAPI = () => loadSecureUrl(UAllCourses);\n\nexport const courseDetailsAPI = (id: number) => loadSecureUrl(`${UAllCourses}${id}/`);\n\nexport const applyToCourseAPI = (data: any, course: number) =>\n  loadSecureUrl(`courses/${course}/apply/`, {\n    method: 'post',\n    data,\n  });\n\nexport const getAllAppliedCoursesAPI = () => loadSecureUrl(UAllAppliedCourses);\n\nexport const getAllNotices = () => loadOpenUrl(UALLNOTICES);\nexport const getCoordinator = (department: string) => loadOpenUrl(`${UCOORDINATOR}${department}/`);\nexport const getNotice = (id: number) => loadOpenUrl(`${UALLNOTICES}${id}/`);\nexport const getBadges = () => loadOpenUrl(`${URanking}`);\n","import React, {FC, useState, useEffect} from 'react';\nimport {Button, Card, Descriptions, Skeleton, Typography, Empty} from 'antd';\nimport {Link} from 'react-router-dom';\nimport {openNotificationWithIcon} from 'helpers/notification.helper';\nimport {getAllAvailableCourseAPI} from 'helpers/api/core.api.helper';\n\ninterface IProps {}\n\nconst {Title} = Typography;\nconst CoursesStudentScreen: FC<IProps> = () => {\n  const [courses, setCourses] = useState([\n    {\n      id: 0,\n      title: '',\n      details: '',\n      open: '',\n      close: '',\n      duration: '',\n      start_date: '',\n      end_date: '',\n    },\n  ]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const load = async () => {\n      try {\n        const data = await getAllAvailableCourseAPI();\n        setCourses(data);\n        setLoading(false);\n        console.log(data,'dtat')\n      } catch (e) {\n        openNotificationWithIcon('error', 'Some unknown error occurred', 'Try refreshing the page');\n      }\n    };\n\n    load();\n  }, []);\n\n  if (loading)\n    return (\n      <div className='container'>\n        <Skeleton />\n      </div>\n    );\n\n  return (\n    <div className='container'>\n      <Title>Courses offered</Title>\n      {courses.length === 0 && !loading ? (\n        <Card>\n          <Empty description='No courses are available for now' />\n        </Card>\n      ) : null}\n      {courses.map(course => (\n        <Card>\n          <Descriptions title={course.title}>\n            <Descriptions.Item label='Duration'>{course.duration}</Descriptions.Item>\n            <Descriptions.Item label='Apply By'>\n              {new Date(course.close).toLocaleString()}\n            </Descriptions.Item>\n          </Descriptions>\n          <Link to={`/courses/${course.id}/`}>\n            <Button type='primary'>View all details</Button>\n          </Link>\n        </Card>\n      ))}\n    </div>\n  );\n};\n\nexport default CoursesStudentScreen;\n"],"sourceRoot":""}