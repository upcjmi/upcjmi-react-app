{"version":3,"sources":["helpers/api/company.api.helper.ts","helpers/api/core.api.helper.ts","helpers/dateFomatter.tsx","components/home/noticeCard.tsx","components/home/noticeBoard.tsx","components/sideDrawerForm.tsx","components/company/extraDetailsChange.company.tsx","components/company/companyDetail.company.tsx","screens/company/home.company.screen.tsx"],"names":["getAllCompaniesAPI","loadSecureUrl","getJobBasicDetailsAPI","company","getJobDetailsAPI","job","applyToJobAPI","data","method","getAllJobsAppliedAPI","saveNewJobAPI","saveCompanyExtraDataAPI","action","id","toString","allJobsByCompany","companyDetail","getAllApplications","jobId","getAllRounds","moveToNextRound","students","round","rejectApplication","placeStudent","fetchStudentResume","getAllAvailableCourseAPI","courseDetailsAPI","applyToCourseAPI","course","getAllAppliedCoursesAPI","getAllNotices","getAllHighlights","loadOpenUrl","getCoordinator","department","getNotice","getBadges","dateFormatter","str","date","Date","getDay","getMonth","getFullYear","NoticeCard","title","details","created","highlight","className","to","NOTICE_PATH","substring","Title","NoticeBoard","noticesData","loading","style","backgroundColor","length","map","index","span","icon","type","theme","SideDrawerForm","children","trigger","Render","render","useState","visible","setVisibility","useEffect","onClick","placement","closable","maskClosable","onClose","width","selectScreen","connect","Option","state","extraDetails","create","form","name","about","onSave","getFieldDecorator","getFieldsValue","setFieldsValue","getFieldValue","handelSubmit","e","preventDefault","validateFields","err","a","openNotificationWithIcon","onSubmit","hideRequiredMark","Item","label","rules","required","max","initialValue","placeholder","TextArea","autosize","Text","auth","user","company_id","setDetails","setLoading","load","active","justify","push","size","Paragraph","isAuthenticated","props","setData","loadingNotice","setLoadingNotice","allNotices","setAllNotices","response","notices","gutter","sm","md","i","level","color"],"mappings":"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","file":"static/js/29.41d23143.chunk.js","sourcesContent":["import {IAllCompany, ICompanyExtraDetails} from 'types/company.api.type';\nimport {loadSecureUrl} from './main.api.helper';\n\nconst UAllCompanies = 'company/';\nconst UAllAppliedJobs = 'company/job/applied/';\nconst UCompanyExtraDetails = '/company/';\nexport const getAllCompaniesAPI = (): Promise<IAllCompany> => loadSecureUrl(UAllCompanies);\nexport const getJobBasicDetailsAPI = (company: number): Promise<any> =>\n  loadSecureUrl(`company/${company}/job/`);\nexport const getJobDetailsAPI = (company: number, job: number): Promise<any> =>\n  loadSecureUrl(`company/${company}/job/${job}/`);\n\nexport const applyToJobAPI = (company: number, job: number, data: any): Promise<any> =>\n  loadSecureUrl(`company/${company}/job/${job}/apply/`, {\n    method: 'post',\n    data,\n  });\n\nexport const getAllJobsAppliedAPI = (): Promise<any> => loadSecureUrl(UAllAppliedJobs);\n\nexport const saveNewJobAPI = (data: any): Promise<any> =>\n  loadSecureUrl(`/company/job/add/`, {\n    method: 'post',\n    data,\n  });\nexport const saveCompanyExtraDataAPI = (\n  data: ICompanyExtraDetails,\n  action: string,\n  id: number,\n): Promise<ICompanyExtraDetails> =>\n  loadSecureUrl(`${UCompanyExtraDetails + id.toString()}/`, {\n    method: action === 'edit' ? 'patch' : 'put',\n    data,\n  });\nexport const allJobsByCompany = (): Promise<any> => loadSecureUrl('/company/job/all/');\n\nexport const companyDetail = (id: number): Promise<any> => loadSecureUrl(`/company/${id}/`);\n\nexport const getAllApplications = (jobId: number): Promise<any> =>\n  loadSecureUrl(`company/job/${jobId}/applications/`);\n\nexport const getAllRounds = (jobId: number): Promise<any> =>\n  loadSecureUrl(`company/job/${jobId}/rounds/`);\n\nexport const moveToNextRound = (jobId: number, students: any, round: number): Promise<any> =>\n  loadSecureUrl(`company/job/${jobId}/select/next/`, {\n    method: 'post',\n    data: {students, round},\n  });\n\nexport const rejectApplication = (jobId: number, students: any): Promise<any> =>\n  loadSecureUrl(`/company/job/${jobId}/select/reject/`, {\n    method: 'post',\n    data: {students},\n  });\n\nexport const placeStudent = (jobId: number, students: any): Promise<any> =>\n  loadSecureUrl(`/company/job/${jobId}/select/place/`, {\n    method: 'post',\n    data: {students},\n  });\n\nexport const fetchStudentResume = (id: number,): Promise<any> =>\n  loadSecureUrl(`/student/resume/${id}/`, {\n    method: 'get',\n  });\n\n","import {loadOpenUrl, loadSecureUrl} from './main.api.helper';\n\nconst UAllCourses = 'courses/';\nconst UAllAppliedCourses = 'courses/applied/';\nconst UALLNOTICES = 'notices/';\nconst UALLHIGHLIGHTS = 'notices/highlights/';\nconst UCOORDINATOR = 'coordinator/';\nconst URanking = 'ranking/';\n\nexport const getAllAvailableCourseAPI = () => loadSecureUrl(UAllCourses);\n\nexport const courseDetailsAPI = (id: number) => loadSecureUrl(`${UAllCourses}${id}/`);\n\nexport const applyToCourseAPI = (data: any, course: number) =>\n  loadSecureUrl(`courses/${course}/apply/`, {\n    method: 'post',\n    data,\n  });\n\nexport const getAllAppliedCoursesAPI = () => loadSecureUrl(UAllAppliedCourses);\n\nexport const getAllNotices = () => loadSecureUrl(UALLNOTICES);\nexport const getAllHighlights = () => loadOpenUrl(UALLHIGHLIGHTS);\nexport const getCoordinator = (department: string) => loadOpenUrl(`${UCOORDINATOR}${department}/`);\nexport const getNotice = (id: number) => loadOpenUrl(`${UALLNOTICES}${id}/`);\nexport const getBadges = () => loadOpenUrl(`${URanking}`);\n","export const dateFormatter = (str: string) => {\n  const date = new Date(str);\n  return `${date.getDay()}-${date.getMonth()}-${date.getFullYear()}`;\n};\n","import {Link} from 'react-router-dom';\nimport React from 'react';\nimport {NOTICE_PATH} from 'constants/routes/main.paths.constant';\nimport {dateFormatter} from 'helpers/dateFomatter';\nimport {Skeleton} from 'antd';\nimport {INotice} from '../../types/common.type';\n\nexport const NoticeCard = ({title, details, id, created, highlight}: INotice) => (\n  <div className='card-notice'>\n    <Link to={`${NOTICE_PATH}${id}`}>\n      <div className={highlight ? 'highlight-card-title' : 'notice-card-title'}>{title}</div>\n    </Link>\n    <p className='notice-card-details'>\n      {details ? details.substring(0, 256) || details : null}\n      {' '}\n      {details ? (\n        <Link to={`${NOTICE_PATH}${id}`} className='read-more'>\n          Read More\n        </Link>\n      ) : null}\n    </p>\n    <p className='notice-card-date'>{dateFormatter(created)}</p>\n  </div>\n);\n","import React, {FC} from 'react';\nimport {Col, Icon, Result, Card, Typography} from 'antd';\nimport {NoticeCard} from 'components/home/noticeCard';\nimport {INotice} from 'types/common.type';\nimport LoadingScreen from '../../screens/loading.screen';\n\ninterface IProps {\n  noticesData: Array<INotice>;\n  loading?: boolean;\n}\n\nconst {Title} = Typography;\n\nexport const NoticeBoard: FC<IProps> = ({noticesData, loading}) => {\n  if (loading) {\n    return (\n      <div id='notices' className='container full-page white lighten-3'>\n        <LoadingScreen />\n      </div>\n    );\n  }\n  return (\n    <Card style={{backgroundColor: '#fafafa'}}>\n      <Title className='mx'>Notice</Title>\n      <div className='notice-container' style={{backgroundColor: '#fafafa'}}>\n        {noticesData.length > 0 ? (\n          noticesData.map((details, index) => (\n            <Col span={24}>\n              <NoticeCard {...details} />\n            </Col>\n          ))\n        ) : (\n          <Result\n            icon={<Icon type='smile' theme='twoTone' />}\n            title='We dont have any notices for now!'\n          />\n        )}\n      </div>\n    </Card>\n  );\n};\n","import React, {FC, useEffect, useState} from 'react';\nimport {Drawer} from 'antd';\nimport {selectScreen} from 'helpers/screen.helper';\n\ninterface IProps {\n  children: any;\n  title?: string;\n  trigger?: boolean;\n  [key: string]: any;\n}\n\nconst SideDrawerForm: FC<IProps> = ({title, children, trigger, render: Render}: IProps) => {\n  const [visible, setVisibility] = useState(false);\n  useEffect(() => {\n    setVisibility(trigger || false);\n  }, [trigger]);\n  return (\n    <div>\n      {/* eslint-disable-next-line max-len */}\n      {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions */}\n      <div onClick={() => setVisibility(true)}>{children}</div>\n      <Drawer\n        title={title}\n        placement='right'\n        closable\n        maskClosable={!trigger}\n        onClose={() => setVisibility(false)}\n        visible={visible}\n        width={selectScreen(300, 400, 500)}>\n        <Render />\n      </Drawer>\n    </div>\n  );\n};\n\nexport default SideDrawerForm;\n","import React, {FC, useState} from 'react';\nimport {connect} from 'react-redux';\nimport {Typography, Form, Input, DatePicker, Tag, Button, Select, Icon} from 'antd';\nimport moment from 'moment';\n\nimport {openNotificationWithIcon} from 'helpers/notification.helper';\nimport {saveCompanyExtraDataAPI} from 'helpers/api/company.api.helper';\nimport {IReduxState} from 'reducers';\nimport {ICompanyExtraDetails} from 'types/company.api.type';\n\nconst {Title} = Typography;\nconst {Option} = Select;\n\ninterface ITagProps {\n  tags: Array<string>;\n  change: any;\n  addText: string;\n}\n\nconst TagEditor: FC<ITagProps> = ({tags, change, addText}: ITagProps) => {\n  const [inputVisible, setVisible] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n\n  const removeTag = (tag: string): void => {\n    const newTags = tags;\n    const index = newTags.indexOf(tag);\n    if (index > -1) {\n      newTags.splice(index, 1);\n    }\n    change(newTags);\n  };\n\n  const addTag = (e: any) => {\n    const newTags = tags;\n    const {value} = e.target;\n    if (value.length <= 0) return;\n    newTags.push(value);\n    change(newTags);\n    setVisible(false);\n    setInputValue('');\n  };\n\n  return (\n    <div>\n      {tags.map(tag => {\n        return (\n          <Tag key={tag} closable onClose={() => removeTag(tag)}>\n            {tag}\n          </Tag>\n        );\n      })}\n      {inputVisible ? (\n        <Input\n          value={inputValue}\n          placeholder={addText}\n          size='small'\n          onChange={e => setInputValue(e.target.value)}\n          onPressEnter={addTag}\n          onBlur={addTag}\n          className='width-150'\n          autoFocus\n        />\n      ) : (\n        <Button\n          size='small'\n          type='dashed'\n          icon='plus'\n          onClick={() => {\n            setVisible(true);\n          }}>\n          {addText}\n        </Button>\n      )}\n    </div>\n  );\n};\n\ninterface ILinkDisplayProps {\n  type: string;\n  link: string;\n  onChange: any;\n  remove: any;\n}\n\nconst LinkDisplay: FC<ILinkDisplayProps> = ({type, link, onChange, remove}: ILinkDisplayProps) => {\n  const setProfile = (nType: string, nLink: string) => {\n    onChange({\n      type: nType,\n      link: nLink,\n    });\n  };\n\n  return (\n    <Input.Group compact style={{width: '100%', display: 'block'}}>\n      <Select\n        value={type}\n        style={{width: '30%'}}\n        onChange={(value: string) => {\n          setProfile(value, link);\n        }}>\n        <Option value='W'>Link</Option>\n        <Option value='G'>GitHub</Option>\n        <Option value='B'>Behance</Option>\n        <Option value='S'>StackOverFlow</Option>\n        <Option value='M'>Medium</Option>\n      </Select>\n      <Input\n        style={{width: '60%'}}\n        placeholder='https://example.com'\n        value={link}\n        onChange={(e: any) => setProfile(type, e.target.value)}\n      />\n      {/* eslint-disable-next-line max-len */}\n      {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions */}\n      <span className='center' style={{width: '10%'}} onClick={remove}>\n        <Icon type='delete' />\n      </span>\n    </Input.Group>\n  );\n};\n\ninterface IProfile {\n  type: string;\n  link: string;\n}\n\ninterface ILinkEditorProps {\n  links: Array<IProfile>;\n  change: any;\n}\n\nconst LinkEditor: FC<ILinkEditorProps> = ({links, change}: ILinkEditorProps) => {\n  const setProfile = (index: number, link: any) => {\n    const newLinks = links;\n    newLinks[index] = link;\n    change(newLinks);\n  };\n\n  const addProfile = () => {\n    const newLinks = links;\n    newLinks.push({\n      type: 'W',\n      link: '',\n    });\n    change(newLinks);\n  };\n\n  const removeProfile = (index: number) => {\n    const newLinks = links;\n    newLinks.splice(index, 1);\n    change(newLinks);\n  };\n\n  return (\n    <div>\n      {links.map(({link, type}, index) => (\n        <LinkDisplay\n          key={index.toString()}\n          type={type}\n          link={link}\n          onChange={(newLink: ILinkEditorProps) => setProfile(index, newLink)}\n          remove={() => removeProfile(index)}\n        />\n      ))}\n      <Button type='dashed' icon='plus' onClick={addProfile} className='full-width'>\n        Add Profile\n      </Button>\n    </div>\n  );\n};\n\ninterface IStateProps {\n  extraDetails: ICompanyExtraDetails | null | undefined;\n}\n\ninterface IProps extends IStateProps {\n  action: 'add' | 'edit';\n  form: any;\n  id: any;\n  name: any;\n  about: any;\n  onSave: any;\n}\n\nconst ExtraDetailsChangeCompany: FC<IProps> = ({\n  action,\n  form,\n  extraDetails,\n  name,\n  about,\n  id,\n  onSave,\n}: IProps) => {\n  const {getFieldDecorator, setFieldsValue, getFieldValue, getFieldsValue} = form;\n  let details: ICompanyExtraDetails = {\n    name: '',\n    about: '',\n  };\n  if (extraDetails !== null && extraDetails !== undefined) details = extraDetails;\n  const handelSubmit = (e: any) => {\n    e.preventDefault();\n    const {validateFields} = form;\n    validateFields(async (err: any) => {\n      if (!err) {\n        const data = getFieldsValue();\n        try {\n          await saveCompanyExtraDataAPI(data, action, id);\n          openNotificationWithIcon('success', 'Saved your details');\n          onSave(data);\n        } catch (error) {\n          openNotificationWithIcon('error', 'There are errors in saving your details.');\n        }\n      } else openNotificationWithIcon('error', 'Please Correct the error displayed in forms.');\n    });\n  };\n\n  return (\n    <div>\n      <Title>Details</Title>\n      <br />\n      <Form onSubmit={handelSubmit} hideRequiredMark>\n        <Form.Item label='Company Name'>\n          {getFieldDecorator('name', {\n            rules: [{required: true, max: 50}],\n            initialValue: name,\n          })(<Input type='text' placeholder='Company Name' />)}\n        </Form.Item>\n\n        <Form.Item label='About Company'>\n          {getFieldDecorator('about', {\n            rules: [{required: true, max: 400}],\n            initialValue: about,\n          })(<Input.TextArea placeholder='About Company' autosize />)}\n        </Form.Item>\n\n        <br />\n        <br />\n        <Button type='primary' className='full-width' onClick={handelSubmit}>\n          Save\n        </Button>\n      </Form>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: IReduxState): IStateProps => ({\n  extraDetails: state.company.extraDetails,\n});\n\nexport default connect(mapStateToProps)(Form.create({})(ExtraDetailsChangeCompany));\n","import React, {FC, useState, useEffect} from 'react';\nimport {Typography, Card, Button, Skeleton,Row,Col} from 'antd';\nimport {connect} from 'react-redux';\nimport SideDrawerForm from 'components/sideDrawerForm';\nimport {IReduxState} from 'reducers';\nimport {companyDetail} from 'helpers/api/company.api.helper';\nimport ExtraDetailsChange from './extraDetailsChange.company';\n\nconst {Title, Text} = Typography;\n\ninterface IStateProps {\n  id: number | undefined;\n}\n\ninterface IProps extends IStateProps {}\n\nconst CompanyDetail: FC<IProps> = ({id}) => {\n  const [details, setDetails] = useState();\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const load = async () => {\n      // @ts-ignore\n      const data = await companyDetail(id);\n      setDetails(data);\n      setLoading(false);\n    };\n\n    load();\n  }, [id]);\n\n  if (loading)\n    return (\n      <Card>\n        <Skeleton active />\n      </Card>\n    );\n\n  return (\n    <Card>\n      <div>\n        <Title>{details.name}</Title>\n      </div>\n      <Text>{details.about}</Text>\n      <SideDrawerForm\n        render={() => (\n          // @ts-ignore\n          <ExtraDetailsChange\n            name={details.name}\n            about={details.about}\n            action='add'\n            id={id}\n            onSave={(e: any) => {\n              setDetails(e);\n            }}\n          />\n        )}>\n        {\n          // {setDetails({name:e.name,about:e.about})}\n        }\n        <Row justify='end'>\n          <Col span={2} push={22}>\n            <Button type='link' size='large'>\n              edit\n            </Button>\n          </Col>\n        </Row>\n      </SideDrawerForm>\n    </Card>\n  );\n};\n\nconst mapStateToProps = (state: IReduxState): IStateProps => ({\n  // @ts-ignore\n  id: state.auth.user.company_id,\n});\n\nexport default connect(mapStateToProps)(CompanyDetail);\n","import React, {FC, useState, useEffect} from 'react';\nimport {connect} from 'react-redux';\nimport {Typography, Row, Col, Card, Button, Descriptions} from 'antd';\n\nimport {IReduxState} from 'reducers';\nimport {IUserMeta} from 'types/api.type';\nimport CompanyDetail from 'components/company/companyDetail.company';\nimport {Link} from 'react-router-dom';\nimport {NoticeBoard} from 'components/home/noticeBoard';\nimport NotAuthorisedScreen from '../403.screen';\nimport {allJobsByCompany} from '../../helpers/api/company.api.helper';\nimport {openNotificationWithIcon} from '../../helpers/notification.helper';\nimport {INotice} from '../../types/common.type';\nimport {getAllNotices} from '../../helpers/api/core.api.helper';\n\ninterface IStateProps {\n  user: IUserMeta | undefined;\n  isAuthenticated: boolean;\n}\n\ninterface IProps extends IStateProps {}\n\nconst {Title, Paragraph} = Typography;\n\nconst HomeCompanyScreen: FC<IProps> = (props: IProps) => {\n  const {user, isAuthenticated} = props;\n  const [data, setData] = useState([]);\n  const [loadingNotice, setLoadingNotice] = useState(true);\n  const [allNotices, setAllNotices] = useState<Array<INotice>>([]);\n\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const load = async () => {\n      try {\n        const response = await allJobsByCompany();\n        const notices = await getAllNotices();\n        setAllNotices(notices);\n        setLoadingNotice(false);\n\n        setData(response);\n        setLoading(false);\n        console.log(response);\n      } catch (e) {\n        console.log(e);\n        openNotificationWithIcon('error', 'An error occurred', 'Try refreshing your page');\n      }\n    };\n    load();\n  }, []);\n\n  const CardJobs = () => {\n    if (data[0])\n      return (\n        <Card>\n          {data.map((i: any) => (\n            <Row justify='space-between'>\n              <Col span={18}>\n                <Title level={4}>{i.title}</Title>\n              </Col>\n              <Col span={6}>\n                <Button type='primary'>\n                  <Link to={`recruitment/${i.id}/`} style={{color: '#fff'}}>\n                    View Details\n                  </Link>\n                </Button>\n              </Col>\n              <br />\n              <br />\n            </Row>\n          ))}\n        </Card>\n      );\n    return (\n      <Card>\n        <Link to='/recruitment/add/'>\n          <Button type='primary' icon='plus'>\n            Add Recruitment\n          </Button>\n        </Link>\n      </Card>\n    );\n  };\n  if (!isAuthenticated) return <NotAuthorisedScreen />;\n\n  if (user && user.type !== 'C') return <NotAuthorisedScreen />;\n\n  return (\n    <div className='container'>\n      <br />\n      <Row gutter={24}>\n        <Col sm={24} md={12}>\n          <CompanyDetail />\n        </Col>\n        <Col sm={24} md={12}>\n          <NoticeBoard loading={loadingNotice} noticesData={allNotices} />\n          <br />\n          <CardJobs />\n        </Col>\n      </Row>\n      <br />\n      {/* <Card> */}\n      {/* <Title level={2}>Drafts</Title> */}\n      {/*  <Descriptions title='Android developer'> */}\n      {/*    <Descriptions.Item label='Type'>Recruitment</Descriptions.Item> */}\n      {/*    <Descriptions.Item label='Last updated at'> */}\n      {/*      {new Date('').toLocaleString()} */}\n      {/*    </Descriptions.Item> */}\n      {/*    <Descriptions.Item label='Rounds'>5</Descriptions.Item> */}\n      {/*    <Descriptions.Item label='Last updated at'>Courses Allowed</Descriptions.Item> */}\n      {/*    <Descriptions.Item label='Application opens on'> */}\n      {/*      {new Date('').toLocaleString()} */}\n      {/*    </Descriptions.Item> */}\n      {/*    <Descriptions.Item label='Application closes on'> */}\n      {/*      {new Date('').toLocaleString()} */}\n      {/*    </Descriptions.Item> */}\n      {/*  </Descriptions> */}\n\n      {/*  <Button type='primary'>Edit/Publish Draft</Button> */}\n      {/* </Card> */}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: IReduxState): IStateProps => ({\n  user: state.auth.user,\n  isAuthenticated: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps)(HomeCompanyScreen);\n"],"sourceRoot":""}