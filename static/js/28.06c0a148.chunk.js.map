{"version":3,"sources":["helpers/api/company.api.helper.ts","../node_modules/antd/es/empty/style/index.js","components/student/jobListing.student.tsx","components/student/companyDrives.student.tsx","screens/student/recruitment.student.screen.tsx"],"names":["getAllCompaniesAPI","loadSecureUrl","getJobBasicDetailsAPI","company","getJobDetailsAPI","job","applyToJobAPI","data","method","getAllJobsAppliedAPI","saveNewJobAPI","saveCompanyExtraDataAPI","action","id","toString","allJobsByCompany","companyDetail","getAllApplications","jobId","getAllRounds","moveToNextRound","students","round","rejectApplication","placeStudent","fetchStudentResume","JobListing","companyId","title","pay","package","courses","courses_allowed","close","Item","label","Date","toLocaleString","to","type","Title","CompanyDrives","useState","jobs","setJobs","loading","setLoading","useEffect","a","openNotificationWithIcon","name","load","cards","map","xs","key","level","RecruitmentStudentScreen","companies","setCompanies","index","className","length","description"],"mappings":"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","file":"static/js/28.06c0a148.chunk.js","sourcesContent":["import {IAllCompany, ICompanyExtraDetails} from 'types/company.api.type';\nimport {loadSecureUrl} from './main.api.helper';\n\nconst UAllCompanies = 'company/';\nconst UAllAppliedJobs = 'company/job/applied/';\nconst UCompanyExtraDetails = '/company/';\nexport const getAllCompaniesAPI = (): Promise<IAllCompany> => loadSecureUrl(UAllCompanies);\nexport const getJobBasicDetailsAPI = (company: number): Promise<any> =>\n  loadSecureUrl(`company/${company}/job/`);\nexport const getJobDetailsAPI = (company: number, job: number): Promise<any> =>\n  loadSecureUrl(`company/${company}/job/${job}/`);\n\nexport const applyToJobAPI = (company: number, job: number, data: any): Promise<any> =>\n  loadSecureUrl(`company/${company}/job/${job}/apply/`, {\n    method: 'post',\n    data,\n  });\n\nexport const getAllJobsAppliedAPI = (): Promise<any> => loadSecureUrl(UAllAppliedJobs);\n\nexport const saveNewJobAPI = (data: any): Promise<any> =>\n  loadSecureUrl(`/company/job/add/`, {\n    method: 'post',\n    data,\n  });\nexport const saveCompanyExtraDataAPI = (\n  data: ICompanyExtraDetails,\n  action: string,\n  id: number,\n): Promise<ICompanyExtraDetails> =>\n  loadSecureUrl(`${UCompanyExtraDetails + id.toString()}/`, {\n    method: action === 'edit' ? 'patch' : 'put',\n    data,\n  });\nexport const allJobsByCompany = (): Promise<any> => loadSecureUrl('/company/job/all/');\n\nexport const companyDetail = (id: number): Promise<any> => loadSecureUrl(`/company/${id}/`);\n\nexport const getAllApplications = (jobId: number): Promise<any> =>\n  loadSecureUrl(`company/job/${jobId}/applications/`);\n\nexport const getAllRounds = (jobId: number): Promise<any> =>\n  loadSecureUrl(`company/job/${jobId}/rounds/`);\n\nexport const moveToNextRound = (jobId: number, students: any, round: number): Promise<any> =>\n  loadSecureUrl(`company/job/${jobId}/select/next/`, {\n    method: 'post',\n    data: {students, round},\n  });\n\nexport const rejectApplication = (jobId: number, students: any): Promise<any> =>\n  loadSecureUrl(`/company/job/${jobId}/select/reject/`, {\n    method: 'post',\n    data: {students},\n  });\n\nexport const placeStudent = (jobId: number, students: any): Promise<any> =>\n  loadSecureUrl(`/company/job/${jobId}/select/place/`, {\n    method: 'post',\n    data: {students},\n  });\n\nexport const fetchStudentResume = (id: number,): Promise<any> =>\n  loadSecureUrl(`/student/resume/${id}/`, {\n    method: 'get',\n  });\n\n","import '../../style/index.less';\nimport './index.less';","import React, {FC} from 'react';\nimport {Button, Card, Descriptions} from 'antd';\nimport {Link} from 'react-router-dom';\n\ninterface IProps {\n  job: any;\n  companyId: number;\n}\n\n\nconst JobListing: FC<IProps> = ({job, companyId}: IProps) => {\n  const {title, package: pay, courses_allowed: courses, close, id} = job;\n\n  return (\n    <Card>\n      <Descriptions title={title}>\n        <Descriptions.Item label='Package'>{pay}</Descriptions.Item>\n        <Descriptions.Item label='Courses Allowed'>{courses}</Descriptions.Item>\n        <Descriptions.Item label='Apply by'>\n          {(new Date(close)).toLocaleString()}\n        </Descriptions.Item>\n      </Descriptions>\n      <Link to={`/company/${companyId}/job/${id}/`}>\n        <Button type='primary'>\n          View full details\n        </Button>\n      </Link>\n    </Card>\n  );\n};\n\n\nexport default JobListing;\n","import React, {FC, useEffect, useState} from 'react';\nimport {Card, Col, Row, Typography, Skeleton} from 'antd';\n\nimport {ICompany} from 'types/company.api.type';\nimport {getJobBasicDetailsAPI} from 'helpers/api/company.api.helper';\nimport {openNotificationWithIcon} from 'helpers/notification.helper';\nimport JobListing from './jobListing.student';\n\n\ninterface IProps {\n  company: ICompany;\n}\n\nconst {Title} = Typography;\n\nconst CompanyDrives: FC<IProps> = ({company}: IProps) => {\n\n  const [jobs, setJobs] = useState([{id: ''}]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const load = async () => {\n      try{\n        const data = await getJobBasicDetailsAPI(company.id);\n        setJobs(data);\n        setLoading(false);\n      } catch (e) {\n        openNotificationWithIcon(\n          'error',\n          `Some unknown error occurred while fetching ${company.name} details`,\n          'Try refreshing the page'\n        )\n      }\n    };\n\n    load();\n  }, [company]);\n\n  if(jobs === [] && !loading)\n    return null;\n\n  const cards = jobs.map((job) => (\n    <Col xs={24} key={job.id.toString()}>\n      <JobListing job={job} companyId={company.id} />\n    </Col>\n  ));\n\n  return (\n    <div>\n      <br />\n\n      <Title level={3}>\n        {company.name}\n      </Title>\n\n      <Row>\n        {loading? (\n          <Card>\n            <Skeleton />\n          </Card>\n        ) : cards}\n      </Row>\n\n      <br />\n      <br />\n    </div>\n  );\n};\n\n\nexport default CompanyDrives;\n","import React, {FC, useState, useEffect} from 'react';\nimport {Typography, Skeleton, Card, Empty} from 'antd';\nimport CompanyDrives from 'components/student/companyDrives.student';\nimport {getAllCompaniesAPI} from 'helpers/api/company.api.helper';\n\ninterface IProps {}\n\nconst {Title} = Typography;\n\nconst RecruitmentStudentScreen: FC<IProps> = () => {\n  const [companies, setCompanies] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const load = async () => {\n      const data = await getAllCompaniesAPI();\n      // @ts-ignore\n      setCompanies(data);\n      setLoading(false);\n    };\n\n    load();\n  }, []);\n\n  const jobs = companies.map((company, index) => (\n    <CompanyDrives key={index.toString()} company={company} />\n  ));\n\n  return (\n    <div className='container'>\n      <Title>Recruitment Drives</Title>\n      {jobs.length === 0 && !loading ? (\n        <Card>\n          <Empty description='No jobs are available for now' />\n        </Card>\n      ) : null}\n\n      {loading ? (\n        <Card>\n          <Skeleton />\n        </Card>\n      ) : (\n        jobs\n      )}\n    </div>\n  );\n};\n\nexport default RecruitmentStudentScreen;\n"],"sourceRoot":""}