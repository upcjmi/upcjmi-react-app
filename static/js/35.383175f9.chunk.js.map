{"version":3,"sources":["helpers/api/company.api.helper.ts","components/sideDrawerForm.tsx","components/company/extraDetailsChange.company.tsx","components/company/companyDetail.company.tsx","screens/company/home.company.screen.tsx"],"names":["getAllCompaniesAPI","loadSecureUrl","getJobBasicDetailsAPI","company","getJobDetailsAPI","job","applyToJobAPI","data","method","getAllJobsAppliedAPI","saveNewJobAPI","saveCompanyExtraDataAPI","action","id","toString","allJobsByCompany","companyDetail","getAllApplications","jobId","getAllRounds","moveToNextRound","students","round","rejectApplication","placeStudent","fetchStudentResume","SideDrawerForm","title","children","trigger","Render","render","useState","visible","setVisibility","useEffect","onClick","placement","closable","maskClosable","onClose","width","selectScreen","Title","connect","Option","state","extraDetails","create","form","name","about","onSave","getFieldDecorator","getFieldsValue","setFieldsValue","getFieldValue","handelSubmit","e","preventDefault","validateFields","err","a","openNotificationWithIcon","onSubmit","hideRequiredMark","Item","label","rules","required","max","initialValue","type","placeholder","TextArea","autosize","className","Text","auth","user","company_id","details","setDetails","loading","setLoading","load","active","justify","span","push","size","Paragraph","isAuthenticated","props","setData","response","CardJobs","map","i","level","to","style","color","icon","gutter","sm","md"],"mappings":"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","file":"static/js/35.383175f9.chunk.js","sourcesContent":["import {IAllCompany, ICompanyExtraDetails} from 'types/company.api.type';\nimport {loadSecureUrl} from './main.api.helper';\n\nconst UAllCompanies = 'company/';\nconst UAllAppliedJobs = 'company/job/applied/';\nconst UCompanyExtraDetails = '/company/';\nexport const getAllCompaniesAPI = (): Promise<IAllCompany> => loadSecureUrl(UAllCompanies);\nexport const getJobBasicDetailsAPI = (company: number): Promise<any> =>\n  loadSecureUrl(`company/${company}/job/`);\nexport const getJobDetailsAPI = (company: number, job: number): Promise<any> =>\n  loadSecureUrl(`company/${company}/job/${job}/`);\n\nexport const applyToJobAPI = (company: number, job: number, data: any): Promise<any> =>\n  loadSecureUrl(`company/${company}/job/${job}/apply/`, {\n    method: 'post',\n    data,\n  });\n\nexport const getAllJobsAppliedAPI = (): Promise<any> => loadSecureUrl(UAllAppliedJobs);\n\nexport const saveNewJobAPI = (data: any): Promise<any> =>\n  loadSecureUrl(`/company/job/add/`, {\n    method: 'post',\n    data,\n  });\nexport const saveCompanyExtraDataAPI = (\n  data: ICompanyExtraDetails,\n  action: string,\n  id: number,\n): Promise<ICompanyExtraDetails> =>\n  loadSecureUrl(`${UCompanyExtraDetails + id.toString()}/`, {\n    method: action === 'edit' ? 'patch' : 'put',\n    data,\n  });\nexport const allJobsByCompany = (): Promise<any> => loadSecureUrl('/company/job/all/');\n\nexport const companyDetail = (id: number): Promise<any> => loadSecureUrl(`/company/${id}/`);\n\nexport const getAllApplications = (jobId: number): Promise<any> =>\n  loadSecureUrl(`company/job/${jobId}/applications/`);\n\nexport const getAllRounds = (jobId: number): Promise<any> =>\n  loadSecureUrl(`company/job/${jobId}/rounds/`);\n\nexport const moveToNextRound = (jobId: number, students: any, round: number): Promise<any> =>\n  loadSecureUrl(`company/job/${jobId}/select/next/`, {\n    method: 'post',\n    data: {students, round},\n  });\n\nexport const rejectApplication = (jobId: number, students: any): Promise<any> =>\n  loadSecureUrl(`/company/job/${jobId}/select/reject/`, {\n    method: 'post',\n    data: {students},\n  });\n\nexport const placeStudent = (jobId: number, students: any): Promise<any> =>\n  loadSecureUrl(`/company/job/${jobId}/select/place/`, {\n    method: 'post',\n    data: {students},\n  });\n\nexport const fetchStudentResume = (id: number,): Promise<any> =>\n  loadSecureUrl(`/student/resume/${id}/`, {\n    method: 'get',\n  });\n\n","import React, {FC, useEffect, useState} from 'react';\nimport {Drawer} from 'antd';\nimport {selectScreen} from 'helpers/screen.helper';\n\ninterface IProps {\n  children: any;\n  title?: string;\n  trigger?: boolean;\n  [key: string]: any;\n}\n\nconst SideDrawerForm: FC<IProps> = ({title, children, trigger, render: Render}: IProps) => {\n  const [visible, setVisibility] = useState(false);\n  useEffect(() => {\n    setVisibility(trigger || false);\n  }, [trigger]);\n  return (\n    <div>\n      {/* eslint-disable-next-line max-len */}\n      {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions */}\n      <div onClick={() => setVisibility(true)}>{children}</div>\n      <Drawer\n        title={title}\n        placement='right'\n        closable\n        maskClosable={!trigger}\n        onClose={() => setVisibility(false)}\n        visible={visible}\n        width={selectScreen(300, 400, 500)}>\n        <Render />\n      </Drawer>\n    </div>\n  );\n};\n\nexport default SideDrawerForm;\n","import React, {FC, useState} from 'react';\nimport {connect} from 'react-redux';\nimport {Typography, Form, Input, DatePicker, Tag, Button, Select, Icon} from 'antd';\nimport moment from 'moment';\n\nimport {openNotificationWithIcon} from 'helpers/notification.helper';\nimport {saveCompanyExtraDataAPI} from 'helpers/api/company.api.helper';\nimport {IReduxState} from 'reducers';\nimport {ICompanyExtraDetails} from 'types/company.api.type';\n\nconst {Title} = Typography;\nconst {Option} = Select;\n\ninterface ITagProps {\n  tags: Array<string>;\n  change: any;\n  addText: string;\n}\n\nconst TagEditor: FC<ITagProps> = ({tags, change, addText}: ITagProps) => {\n  const [inputVisible, setVisible] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n\n  const removeTag = (tag: string): void => {\n    const newTags = tags;\n    const index = newTags.indexOf(tag);\n    if (index > -1) {\n      newTags.splice(index, 1);\n    }\n    change(newTags);\n  };\n\n  const addTag = (e: any) => {\n    const newTags = tags;\n    const {value} = e.target;\n    if (value.length <= 0) return;\n    newTags.push(value);\n    change(newTags);\n    setVisible(false);\n    setInputValue('');\n  };\n\n  return (\n    <div>\n      {tags.map(tag => {\n        return (\n          <Tag key={tag} closable onClose={() => removeTag(tag)}>\n            {tag}\n          </Tag>\n        );\n      })}\n      {inputVisible ? (\n        <Input\n          value={inputValue}\n          placeholder={addText}\n          size='small'\n          onChange={e => setInputValue(e.target.value)}\n          onPressEnter={addTag}\n          onBlur={addTag}\n          className='width-150'\n          autoFocus\n        />\n      ) : (\n        <Button\n          size='small'\n          type='dashed'\n          icon='plus'\n          onClick={() => {\n            setVisible(true);\n          }}>\n          {addText}\n        </Button>\n      )}\n    </div>\n  );\n};\n\ninterface ILinkDisplayProps {\n  type: string;\n  link: string;\n  onChange: any;\n  remove: any;\n}\n\nconst LinkDisplay: FC<ILinkDisplayProps> = ({type, link, onChange, remove}: ILinkDisplayProps) => {\n  const setProfile = (nType: string, nLink: string) => {\n    onChange({\n      type: nType,\n      link: nLink,\n    });\n  };\n\n  return (\n    <Input.Group compact style={{width: '100%', display: 'block'}}>\n      <Select\n        value={type}\n        style={{width: '30%'}}\n        onChange={(value: string) => {\n          setProfile(value, link);\n        }}>\n        <Option value='W'>Link</Option>\n        <Option value='G'>GitHub</Option>\n        <Option value='B'>Behance</Option>\n        <Option value='S'>StackOverFlow</Option>\n        <Option value='M'>Medium</Option>\n      </Select>\n      <Input\n        style={{width: '60%'}}\n        placeholder='https://example.com'\n        value={link}\n        onChange={(e: any) => setProfile(type, e.target.value)}\n      />\n      {/* eslint-disable-next-line max-len */}\n      {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions */}\n      <span className='center' style={{width: '10%'}} onClick={remove}>\n        <Icon type='delete' />\n      </span>\n    </Input.Group>\n  );\n};\n\ninterface IProfile {\n  type: string;\n  link: string;\n}\n\ninterface ILinkEditorProps {\n  links: Array<IProfile>;\n  change: any;\n}\n\nconst LinkEditor: FC<ILinkEditorProps> = ({links, change}: ILinkEditorProps) => {\n  const setProfile = (index: number, link: any) => {\n    const newLinks = links;\n    newLinks[index] = link;\n    change(newLinks);\n  };\n\n  const addProfile = () => {\n    const newLinks = links;\n    newLinks.push({\n      type: 'W',\n      link: '',\n    });\n    change(newLinks);\n  };\n\n  const removeProfile = (index: number) => {\n    const newLinks = links;\n    newLinks.splice(index, 1);\n    change(newLinks);\n  };\n\n  return (\n    <div>\n      {links.map(({link, type}, index) => (\n        <LinkDisplay\n          key={index.toString()}\n          type={type}\n          link={link}\n          onChange={(newLink: ILinkEditorProps) => setProfile(index, newLink)}\n          remove={() => removeProfile(index)}\n        />\n      ))}\n      <Button type='dashed' icon='plus' onClick={addProfile} className='full-width'>\n        Add Profile\n      </Button>\n    </div>\n  );\n};\n\ninterface IStateProps {\n  extraDetails: ICompanyExtraDetails | null | undefined;\n}\n\ninterface IProps extends IStateProps {\n  action: 'add' | 'edit';\n  form: any;\n  id: any;\n  name: any;\n  about: any;\n  onSave: any;\n}\n\nconst ExtraDetailsChangeCompany: FC<IProps> = ({\n  action,\n  form,\n  extraDetails,\n  name,\n  about,\n  id,\n  onSave,\n}: IProps) => {\n  const {getFieldDecorator, setFieldsValue, getFieldValue, getFieldsValue} = form;\n  let details: ICompanyExtraDetails = {\n    name: '',\n    about: '',\n  };\n  if (extraDetails !== null && extraDetails !== undefined) details = extraDetails;\n  const handelSubmit = (e: any) => {\n    e.preventDefault();\n    const {validateFields} = form;\n    validateFields(async (err: any) => {\n      if (!err) {\n        const data = getFieldsValue();\n        try {\n          await saveCompanyExtraDataAPI(data, action, id);\n          openNotificationWithIcon('success', 'Saved your details');\n          onSave(data);\n        } catch (error) {\n          openNotificationWithIcon('error', 'There are errors in saving your details.');\n        }\n      } else openNotificationWithIcon('error', 'Please Correct the error displayed in forms.');\n    });\n  };\n\n  return (\n    <div>\n      <Title>Details</Title>\n      <br />\n      <Form onSubmit={handelSubmit} hideRequiredMark>\n        <Form.Item label='Company Name'>\n          {getFieldDecorator('name', {\n            rules: [{required: true, max: 50}],\n            initialValue: name,\n          })(<Input type='text' placeholder='Company Name' />)}\n        </Form.Item>\n\n        <Form.Item label='About Company'>\n          {getFieldDecorator('about', {\n            rules: [{required: true, max: 400}],\n            initialValue: about,\n          })(<Input.TextArea placeholder='About Company' autosize />)}\n        </Form.Item>\n\n        <br />\n        <br />\n        <Button type='primary' className='full-width' onClick={handelSubmit}>\n          Save\n        </Button>\n      </Form>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: IReduxState): IStateProps => ({\n  extraDetails: state.company.extraDetails,\n});\n\nexport default connect(mapStateToProps)(Form.create({})(ExtraDetailsChangeCompany));\n","import React, {FC, useState, useEffect} from 'react';\nimport {Typography, Card, Button, Skeleton,Row,Col} from 'antd';\nimport {connect} from 'react-redux';\nimport SideDrawerForm from 'components/sideDrawerForm';\nimport {IReduxState} from 'reducers';\nimport {companyDetail} from 'helpers/api/company.api.helper';\nimport ExtraDetailsChange from './extraDetailsChange.company';\n\nconst {Title, Text} = Typography;\n\ninterface IStateProps {\n  id: number | undefined;\n}\n\ninterface IProps extends IStateProps {}\n\nconst CompanyDetail: FC<IProps> = ({id}) => {\n  const [details, setDetails] = useState({name: '', about: ''});\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const load = async () => {\n      // @ts-ignore\n      const data = await companyDetail(id);\n      setDetails(data);\n      setLoading(false);\n    };\n\n    load();\n  }, [id]);\n\n  if (loading)\n    return (\n      <Card>\n        <Skeleton active />\n      </Card>\n    );\n\n  return (\n    <Card>\n      <div>\n        <Title>{details.name}</Title>\n      </div>\n      <Text>{details.about}</Text>\n      <SideDrawerForm\n        render={() => (\n          // @ts-ignore\n          <ExtraDetailsChange\n            // @ts-ignore\n            name={details.name}\n            // @ts-ignore\n            about={details.about}\n            action='add'\n            id={id}\n            onSave={(e: any) => {\n              setDetails(e);\n            }}\n          />\n        )}>\n        {\n          // {setDetails({name:e.name,about:e.about})}\n        }\n        <Row justify='end'>\n          <Col span={2} push={22}>\n            <Button type='link' size='large'>\n              edit\n            </Button>\n          </Col>\n        </Row>\n      </SideDrawerForm>\n    </Card>\n  );\n};\n\nconst mapStateToProps = (state: IReduxState): IStateProps => ({\n  // @ts-ignore\n  id: state.auth.user.company_id,\n});\n\nexport default connect(mapStateToProps)(CompanyDetail);\n","import React, {FC, useState,useEffect} from 'react';\nimport {connect} from 'react-redux';\nimport {Typography, Row, Col, Card, Button, Descriptions} from 'antd';\n\nimport {IReduxState} from 'reducers';\nimport {IUserMeta} from 'types/api.type';\nimport NoticeBoard from 'components/noticeBoard';\nimport CompanyDetail from 'components/company/companyDetail.company';\nimport {Link} from 'react-router-dom';\nimport NotAuthorisedScreen from '../403.screen';\nimport {allJobsByCompany} from '../../helpers/api/company.api.helper';\nimport {openNotificationWithIcon} from '../../helpers/notification.helper';\n\ninterface IStateProps {\n  user: IUserMeta | undefined;\n  isAuthenticated: boolean;\n}\n\ninterface IProps extends IStateProps {}\n\nconst {Title,Paragraph} = Typography;\n\nconst HomeCompanyScreen: FC<IProps> = (props: IProps) => {\n  const {user, isAuthenticated} = props;\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const load = async () => {\n      try {\n        const response = await allJobsByCompany();\n        setData(response);\n        setLoading(false);\n        console.log(response)\n      } catch (e) {\n        console.log(e);\n        openNotificationWithIcon('error', 'An error occurred', 'Try refreshing your page');\n      }\n    };\n    load();\n  }, [])\n  const CardJobs = () => {\n    if(data[0])\n      return (\n        <Card>\n          {\n      data.map((i:any)=>(\n        <Row justify='space-between'>\n          <Col span={18}>\n            <Title level={4}>{i.title}</Title>\n          </Col>\n          <Col span={6}>\n            <Button type='primary'>\n              <Link to={`recruitment/${i.id}/`} style={{color:'#fff'}}>View Details</Link>\n            </Button>\n          </Col>\n          <br />\n          <br />\n        </Row>\n      ))\n        }\n        </Card>\n      )\n    return (\n      <Card>\n        <Link to='/recruitment/add/'>\n          <Button type='primary' icon='plus'>\n          Add Recruitment\n          </Button>\n        </Link>\n      </Card>\n    )\n  }\n  if (!isAuthenticated) return <NotAuthorisedScreen />;\n\n  if (user && user.type !== 'C') return <NotAuthorisedScreen />;\n\n  return (\n    <div className='container'>\n      <Row gutter={24}>\n        <Col sm={24} md={12}>\n          <CompanyDetail />\n        </Col>\n        <Col sm={24} md={12}>\n          <CardJobs />\n          {/* <NoticeBoard /> */}\n        </Col>\n      </Row>\n      <br />\n      {/* <Card> */}\n      {/* <Title level={2}>Drafts</Title> */}\n      {/*  <Descriptions title='Android developer'> */}\n      {/*    <Descriptions.Item label='Type'>Recruitment</Descriptions.Item> */}\n      {/*    <Descriptions.Item label='Last updated at'> */}\n      {/*      {new Date('').toLocaleString()} */}\n      {/*    </Descriptions.Item> */}\n      {/*    <Descriptions.Item label='Rounds'>5</Descriptions.Item> */}\n      {/*    <Descriptions.Item label='Last updated at'>Courses Allowed</Descriptions.Item> */}\n      {/*    <Descriptions.Item label='Application opens on'> */}\n      {/*      {new Date('').toLocaleString()} */}\n      {/*    </Descriptions.Item> */}\n      {/*    <Descriptions.Item label='Application closes on'> */}\n      {/*      {new Date('').toLocaleString()} */}\n      {/*    </Descriptions.Item> */}\n      {/*  </Descriptions> */}\n\n      {/*  <Button type='primary'>Edit/Publish Draft</Button> */}\n      {/* </Card> */}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: IReduxState): IStateProps => ({\n  user: state.auth.user,\n  isAuthenticated: state.auth.isAuthenticated,\n});\n\nexport default connect(mapStateToProps)(HomeCompanyScreen);\n"],"sourceRoot":""}