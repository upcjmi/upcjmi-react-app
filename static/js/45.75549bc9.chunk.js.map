{"version":3,"sources":["components/forgetPasswordForm.jsx","screens/forgetPassword.screen.tsx"],"names":["ForgetPasswordForm","props","handleSubmit","e","a","preventDefault","form","signIn","validateFields","err","values","password","verifyPassword","resetPasswordOTP","email","otp","new_password","then","passwordChangedSuccessfully","catch","errorInChangingPassword","verifyPasswordIsNotSame","getOTP","setState","shouldGetOTP","setTimeout","getFieldValue","requestForgetPasswordOTP","state","this","inProgress","getFieldDecorator","onSubmit","className","id","Item","rules","required","message","type","prefix","placeholder","autoComplete","autoCapitalize","autoCorrect","style","display","flexDirection","alignItems","justifyContent","onClick","disabled","icon","secureInput","htmlType","React","Component","connect","auth","dispatch","signInWithEmailAction","create","name","Title","ForgetPassword"],"mappings":"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","file":"static/js/45.75549bc9.chunk.js","sourcesContent":["import React from 'react';\nimport {Form, Icon, Input, Button} from 'antd';\nimport {connect} from 'react-redux';\nimport {requestForgetPasswordOTP, resetPasswordOTP} from '../helpers/api/api.helper';\nimport {signInWithEmailAction} from '../actions/auth.action';\nimport {\n  passwordChangedSuccessfully,\n  errorInChangingPassword,\n  verifyPasswordIsNotSame,\n} from '../helpers/notification.helper';\n\nclass ForgetPasswordForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      shouldGetOTP: true,\n    };\n  }\n\n  handleSubmit = async e => {\n    e.preventDefault();\n    const {form, signIn} = this.props;\n    const {validateFields} = form;\n    validateFields(async (err, values) => {\n      if (!err) {\n        if (values.password === values.verifyPassword) {\n          resetPasswordOTP({\n            email: values.email,\n            otp: values.otp,\n            new_password: values.password,\n          })\n            .then(() => {\n              passwordChangedSuccessfully();\n              signIn(values.email, values.password);\n            })\n            .catch(() => {\n              errorInChangingPassword();\n            });\n        } else {\n          verifyPasswordIsNotSame();\n        }\n      }\n    });\n  };\n\n  getOTP = async () => {\n    this.setState(\n      {\n        shouldGetOTP: false,\n      },\n      () => {\n        setTimeout(() => {\n          this.setState({\n            shouldGetOTP: true,\n          });\n        }, 5000);\n      },\n    );\n    const {form} = this.props;\n    const {getFieldValue} = form;\n    await requestForgetPasswordOTP(getFieldValue('email'));\n  };\n\n  render() {\n    const {form, inProgress} = this.props;\n    const {shouldGetOTP} = this.state;\n    const {getFieldDecorator} = form;\n\n    return (\n      <Form onSubmit={this.handleSubmit} className='login-form' id='sign-in-form'>\n        <Form.Item>\n          {getFieldDecorator('email', {\n            rules: [\n              {required: true, message: 'Please input your email!'},\n              {type: 'email', message: 'Enter a valid email!'},\n            ],\n          })(\n            <Input\n              prefix={<Icon type='user' className='input-prefix' />}\n              placeholder='Email'\n              type='email'\n              autoComplete='username email'\n              autoCapitalize='none'\n              autoCorrect='off'\n            />,\n          )}\n        </Form.Item>\n        <br />\n        <Form.Item>\n          {getFieldDecorator('otp', {\n            rules: [\n              {required: true, message: 'Please input your OTP!'},\n              {message: 'Enter a valid OTP!'},\n            ],\n          })(\n            <div\n              style={{\n                display: 'flex',\n                flexDirection: 'row',\n                alignItems: 'center',\n                justifyContent: 'space-between',\n              }}>\n              <Input\n                prefix={<Icon type='safety' className='input-prefix' />}\n                placeholder='OTP'\n                type='number'\n                autoCapitalize='none'\n                autoCorrect='off'\n              />\n              <Button\n                onClick={this.getOTP}\n                type='link'\n                disabled={!shouldGetOTP}\n                icon={inProgress ? 'loading' : 'link'}>\n                Get OTP\n              </Button>\n            </div>,\n          )}\n        </Form.Item>\n        <br />\n        <Form.Item>\n          {getFieldDecorator('password', {\n            rules: [\n              {required: true, message: 'Please input your password!'},\n              {message: 'Enter a valid password!'},\n            ],\n          })(\n            <Input\n              prefix={<Icon type='lock' className='input-prefix' />}\n              placeholder='Password'\n              type='password'\n              secureInput\n              autoCapitalize='none'\n              autoCorrect='off'\n            />,\n          )}\n        </Form.Item>\n        <br />\n        <Form.Item>\n          {getFieldDecorator('verifyPassword', {\n            rules: [\n              {required: true, message: 'Please input your verify password!'},\n              {message: 'Enter a valid verify password!'},\n            ],\n          })(\n            <Input\n              prefix={<Icon type='lock' className='input-prefix' />}\n              placeholder='Verify Password'\n              type='password'\n              autoCapitalize='none'\n              autoCorrect='off'\n            />,\n          )}\n        </Form.Item>\n        <br />\n        <br />\n        <Form.Item>\n          <Button\n            htmlType='submit'\n            className='login-form-button'\n            type='primary'\n            icon={inProgress ? 'loading' : null}>\n            Change Password\n          </Button>\n          <br />\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  inProgress: state.auth.inProgress,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  signIn: (email, password) => dispatch(signInWithEmailAction(email, password)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Form.create({name: 'forget-password'})(ForgetPasswordForm));\n","import React, {FC} from 'react';\nimport {Card, Typography} from 'antd';\nimport ForgetPasswordForm from '../components/forgetPasswordForm';\n\nconst {Title} = Typography;\ninterface IProps {}\n\nconst ForgetPassword: FC<IProps> = () => {\n  return (\n    <div className='full-page center-hv grey lighten-3'>\n      <Card className='signinScreen-card'>\n        <Title>Forget Password</Title>\n        <ForgetPasswordForm />\n      </Card>\n    </div>\n  );\n};\n\nexport default ForgetPassword;\n"],"sourceRoot":""}